Parameters:
  VPC:
    Description: 'Select One VPC available in your existing account'
    Type: 'AWS::EC2::VPC::Id'
  DBSubnetId:
    Type: 'AWS::EC2::Subnet::Id'
  OwnerIp:
    Type: String
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
Resources:
  PublicHttp:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      SecurityGroupIngress:
        CidrIp: !Ref OwnerIp
        FromPort: '80'
        ToPort: '80'
        IpProtocol: tcp
      GroupDescription: public access
  PublicSSH:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      SecurityGroupIngress:
        CidrIp: !Ref OwnerIp
        FromPort: '22'
        ToPort: '22'
        IpProtocol: tcp
      GroupDescription: public ssh access
  InternalTraffic:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: internal access
  InternalTrafficRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref InternalTraffic
      IpProtocol: All
      SourceSecurityGroupId: !GetAtt 
        - InternalTraffic
        - GroupId
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '1'
      MaxSize: '3'
      LoadBalancerNames: [!Ref 'ElasticLoadBalancer']
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
  WebServerScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebServerGroup'
      Cooldown: '60'
      ScalingAdjustment: 1
  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebServerGroup'
      Cooldown: '60'
      ScalingAdjustment: -1
  DB:
    Type: 'AWS::EC2::Instance'
    Properties:
      SubnetId: !Ref DBSubnetId
      ImageId: ami-0def1e27f6675f4f9
      InstanceType: t3.micro
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - !Ref InternalTraffic
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: ami-0def1e27f6675f4f9
      InstanceType: t3.micro
      KeyName: !Ref KeyPair
      SecurityGroups:
        - !Ref PublicHttp
        - !Ref InternalTraffic
        - !Ref PublicSSH
  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      AvailabilityZones: !GetAZs ''
      CrossZone: true
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'