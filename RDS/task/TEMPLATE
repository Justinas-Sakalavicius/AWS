Parameters:
  KeyPair:
    Description: Key pair for EC2
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: awsdemokp
  ImageId:
    Description: The ID of the AMI
    Type: 'AWS::EC2::Image::Id'
    Default: ami-0def1e27f6675f4f9
  MinSize:
    Description: Minimum size of the Auto Scaling group
    Type: Number
    Default: 1
  MaxSize:
    Description: Maximum size of the Auto Scaling group
    Type: Number
    Default: 3
  DesiredCapacity:
    Description: Desired capacity of the Auto Scaling group
    Type: Number
    Default: 1
  DBEngine:
    Description: The database engine to be used
    Type: String
    Default: postgres
  DBEngineVersion:
    Description: The version number of the database engine to be used
    Type: String
    Default: 15.3
  DBUsername:
    Description: The database admin account username
    Type: String
    Default: postgres
  DBPassword:
    Description: The database admin account password
    Type: String
    NoEcho: true
    Default: 55273011
  DBAllocatedStorage:
    Description: The size of the database (GB)
    Type: Number
    Default: 20
  PrivateSubnet2Cidr:
    Description: The CIDR block for the second private subnet
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet1Cidr:
    Description: The CIDR block for the first private subnet
    Type: String
    Default: 10.0.2.0/24
  PublicSubnet2Cidr:
    Description: The CIDR block for the second public subnet
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet1Cidr:
    Description: The CIDR block for the first public subnet
    Type: String
    Default: 10.0.0.0/24
  VPCBlock:
    Description: The CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
Description: >-
  AWS CloudFormation Sample Template: Sample template showing how to create a
  VPC and add an RDS DB instance with EC2 instances in public subnet and a
  PostgreSQL DB in private subnet.
Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCBlock
      Tags:
        - Key: Name
          Value: MyVPC
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PublicSubnet1
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PublicSubnet2
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PrivateSubnet1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: PrivateSubnet2
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: MyIG
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for EC2 instances
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: Public
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for RDS instances
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: Private
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt 
            - EC2SecurityGroup
            - GroupId
    DependsOn:
      - EC2SecurityGroup
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3ReadAccessNew
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - 'arn:aws:s3:::justinas-sakalavicius-task8-image-api/*'
                  - 'arn:aws:s3:::justinas-sakalavicius-task8-image-api'
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref EC2SecurityGroup
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
    DependsOn: LoadBalancer
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref ImageId
        InstanceType: t3.micro
        KeyName: awsdemokp
        NetworkInterfaces:
          AssociatePublicIpAddress: true
          SubnetId:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
        IamInstanceProfile:
          Arn: !GetAtt 
            - InstanceProfile
            - Arn
        SecurityGroupIds:
          - !GetAtt 
            - EC2SecurityGroup
            - GroupId
        UserData: 
          'Fn::Base64': !Sub |
            #!/bin/bash
            dnf install -y dotnet-sdk-6.0
            mkdir web-app
            aws s3 cp s3://justinas-sakalavicius-task2-web-app web-app --recursive
            cd web-app
            unzip awsDatabase.zip
            cd ./publish/
            dotnet awsDatabase.dll --urls "http://0.0.0.0:80"
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn: LoadBalancer
    Properties:
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      TargetGroupARNs:
        - !Ref TargetGroup
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt 
              - LaunchTemplate
              - LatestVersionNumber
          Overrides:
            - InstanceType: t3.micro
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      MetricsCollection:
        - Granularity: 1Minute
      Tags:
        - Key: Name
          Value: WebServer
          PropagateAtLaunch: true
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  RDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: db.t3.micro
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBEngineVersion
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
